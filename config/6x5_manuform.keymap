/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 42 43 44 45 46 54 55 56 57 58 59 10 11 22 23 34 35 46 47>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 48 49 50 51 52 53>;
        };

        mouseorkey: mouseorkey {
            compatible = "zmk,behavior-hold-tap";
            label = "MOUSEORKEY";
            bindings = <&kp>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 42 43 44 45 46 54 55 56 57 58 59 10 11 22 23 34 35 46 47>;
            hold-trigger-on-release;
        };

        hll: hll {
            compatible = "zmk,behavior-hold-tap";
            label = "HLL";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 42 43 44 45 46 54 55 56 57 58 59 10 11 22 23 34 35 46 47>;
            hold-trigger-on-release;
        };

        hlr: hlr {
            compatible = "zmk,behavior-hold-tap";
            label = "HLR";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 48 49 50 51 52 53>;
        };
    };

    combos {
        compatible = "zmk,combos";

        warpd {
            bindings = <&warpEngage>;
            key-positions = <51 56>;
        };
    };

    macros {
        warpEngage: warpEngage {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LG(Z))>;
            label = "WARPENGAGE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC   |  1  |  2  |  3   |  4   |  5   |                    |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB   |  Q  |  W  |  E   |  R   |  T   |                    |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL  |  A  |  S  |  D   |  F   |  G   |                    |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT  |  Z  |  X  |  C   |  V   |  B   |                    |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            // |    2   |  2  | f   | 6    | 4    | 1    |                    | 2    | 1     | w     | s    | n     |  a    |

            bindings = <
&kp GRAVE                               &kp N1                    &kp N2           &kp N3               &kp N4                    &kp N5             &kp N6                &kp N7                    &kp N8               &kp N9                &kp N0                         &kp EQUAL
&kp TAB                                 &kp Q                     &kp W            &kp E                &kp R                     &kp T              &kp Y                 &kp U                     &kp I                &kp O                 &kp P                          &kp MINUS
&hml LS(LA(LC(LEFT_GUI))) LEFT_BRACKET  &kp A                     &kp S            &kp D                &hml LEFT_SHIFT F         &kp G              &kp H                 &hmr RIGHT_SHIFT J        &kp K                &kp L                 &kp SEMI                       &kp SQT
&hll 2 RIGHT_BRACKET                    &kp Z                     &kp X            &kp C                &hll 1 V                  &kp B              &kp N                 &hlr 1 M                  &kp COMMA            &kp DOT               &kp SLASH                      &hlr 2 BACKSLASH
&kp C_PLAY_PAUSE                        &hml LEFT_CONTROL ESCAPE  &kp C_VOLUME_UP  &hml LEFT_GUI SPACE  &mouseorkey LEFT_ALT MB1  &kp C_VOLUME_DOWN  &kp C_BRIGHTNESS_INC  &hmr RIGHT_ALT BACKSPACE  &hmr LEFT_GUI ENTER  &kp C_BRIGHTNESS_DEC  &mouseorkey RIGHT_CONTROL MB2  &kp LC(LG(Q))
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        navigation {
            bindings = <
&none  &none         &none               &kp PAGE_UP    &none                &none                &none                &none            &none            &none                  &none  &none
&none  &none         &kp LA(LEFT_ARROW)  &kp UP_ARROW   &kp LA(RIGHT_ARROW)  &none                &kp LC(LS(PAGE_UP))  &kp LC(LS(TAB))  &kp LC(TAB)      &kp LC(LS(PAGE_DOWN))  &none  &none
&none  &kp LG(LEFT)  &kp LEFT_ARROW      &kp DOWN       &kp RIGHT            &kp RG(RIGHT_ARROW)  &mmv MOVE_LEFT       &mmv MOVE_DOWN   &mmv MOVE_UP     &mmv MOVE_RIGHT        &none  &none
&none  &none         &none               &kp PAGE_DOWN  &none                &none                &msc SCRL_LEFT       &msc SCRL_DOWN   &msc SCRL_UP     &msc SCRL_RIGHT        &none  &none
&none  &none         &kp C_NEXT          &none          &mkp LCLK            &kp C_PREVIOUS       &none                &kp DELETE       &kp RIGHT_SHIFT  &none                  &none  &none
            >;
        };

        bluetooth {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none  &none  &none  &none  &none  &none  &none
&none         &none         &none         &none         &none         &none  &none  &none  &none  &none  &none  &none
&none         &none         &none         &none         &none         &none  &none  &none  &none  &none  &none  &none
&bt BT_CLR    &none         &none         &none         &none         &none  &none  &none  &none  &none  &none  &none
&none         &none         &none         &none         &none         &none  &none  &none  &none  &none  &none  &none
            >;
        };
    };
};
